version: '3.4'

x-proxy: &proxy
  http_proxy: ${http_proxy}
  https_proxy: ${https_proxy}
  no_proxy: ${no_proxy}

volumes:
  es_volume:

services:
  license_finder:
    build:
      context: ./license_finder
      args:
        <<: *proxy
    environment:
      <<: *proxy
    ports: [ '5000:5000' ]
    environment:
      GUNICORN_CMD_ARGS: '--bind 0.0.0.0:5000 -w 4'
      LICENSE_CACHE_DIR: '/app/cache'
      LICENSE_FORMAT: 'csv'
      LICENSE_COLUMNS: 'package_manager name version homepage licenses license_links'
      LICENSE_DEBUG: 'true'
    volumes:
      - ./license_finder:/app
    command: 'python app.py'


  webhooks:
    build:
      context: ./webhooks
      args:
        <<: *proxy
    environment:
      <<: *proxy
      LICENSE_FINDER_URL: http://license_finder:5000
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports: [ '3000:3000' ]
    volumes:
      - ./webhooks:/usr/src/app
    depends_on: [ license_finder, elasticsearch ]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:${ELK_VERSION}
    ports: [ '9200:9200', '9300:9300' ]
    volumes:
      - es_volume:/usr/share/elasticsearch/data
    environment:
      # cf.: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-configuration-methods
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      network.host: 0.0.0.0
      node.max_local_storage_nodes: 1
      cluster.name: elastic.licenses
      bootstrap.memory_lock: 'true'
      discovery.type: single-node

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:${ELK_VERSION}
    ports: [ '5601:5601' ]
    depends_on: [ elasticsearch ]
    environment:
      # cf.: https://www.elastic.co/guide/en/kibana/current/_configuring_kibana_on_docker.html
      SERVER_NAME: kibana.licenses
      ELASTICSEARCH_URL: http://elasticsearch:9200
      #KIBANA_DEFAULTAPPID: dashboard/Main_Dashboard
